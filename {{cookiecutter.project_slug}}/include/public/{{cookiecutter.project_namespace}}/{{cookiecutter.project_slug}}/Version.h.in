
#ifndef @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_H
#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_H

#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION @PROJECT_VERSION@
#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_TWEAK @PROJECT_VERSION_TWEAK@

#define @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_AT_LEAST(x,y,z) \
    (@PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_MAJOR>x || (@PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_MAJOR>=x && \
    (@PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_MINOR>y || (@PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_MINOR>=y && \
     @PROJECT_NAMESPACE_UPPER@_@PROJECT_NAME_UPPER@_VERSION_PATCH>=z))))

namespace {{ cookiecutter.project_namespace }} {
namespace {{ cookiecutter.project_slug }} {

    struct Version {
        int major;
        int minor;
        int patch;
        int tweak;

        Version(int major, int minor, int patch, int tweak = 0) {
            this->major = major;
            this->minor = minor;
            this->patch = patch;
            this->tweak = tweak;
        }

        bool operator== (const Version& o) const;
        bool operator!= (const Version& o) const;

        bool operator> (const Version& o) const;
        bool operator<= (const Version& o) const;
    
        bool operator< (const Version& o) const;
        bool operator>= (const Version& o) const;

        static const Version get_version();
    };

} // namespace {{ cookiecutter.project_slug }}
} // namespace {{ cookiecutter.project_namespace }}

#endif